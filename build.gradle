plugins {
    id 'eclipse'
    id 'maven-publish'
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "0.11.0-SNAPSHOT" apply false
}


apply plugin: 'java'
apply plugin: 'architectury-plugin'   // Parchment mappings.
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'maven-publish'
apply plugin: 'dev.architectury.loom'

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    silentMojangMappingsLicense()

    forge {
        dataGen {
            mod 'sinofeast'
        }
    }

    launches {
        data {
            arg "--existing", file("src/main/resources").absolutePath
        }
    }
}

version = '1.18.2-1.0.1'
group = 'games.moegirl.sinocraft.sinofeast' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'sinofeast'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

repositories {
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }

    maven { url 'https://jitpack.io' }
}

dependencies {
    minecraft "com.mojang:minecraft:1.18.2"
    forge "net.minecraftforge:forge:1.18.2-40.1.0"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-1.18.2:2022.05.22@zip")
    }
    modCompileOnly 'com.github.SinoCraftProject:SinoCore:1.0.0'
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "sinofeast",
                "Specification-Vendor"    : "SinoCraft Project Team",
                "Specification-Version"   : "2", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "MoeGirl Games",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

java {
    withSourcesJar()
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

